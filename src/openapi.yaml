openapi: 3.0.0
info:
    title: User Taller API
    version: 1.0.0
    description: API for managing users, including registration, login, and CRUD operations.

servers:
    - url: http://localhost:3000/api

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    example: 60a7842f58d6c90d58f4e2b6
                username:
                    type: string
                    example: johndoe
                email:
                    type: string
                    format: email
                    example: johndoe@example.com
                password:
                    type: string
                    format: password
                    example: strongpassword123
            required:
                - username
                - email
                - password

        UserResponse:
            type: object
            properties:
                id:
                    type: string
                    example: 60a7842f58d6c90d58f4e2b6
                username:
                    type: string
                    example: johndoe
                email:
                    type: string
                    format: email
                    example: johndoe@example.com

        UserUpdate:
            type: object
            properties:
                username:
                    type: string
                    example: johndoe_updated
                email:
                    type: string
                    format: email
                    example: johndoe_updated@example.com

        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@example.com
                password:
                    type: string
                    format: password
                    example: strongpassword123
            required:
                - email
                - password

        RegisterRequest:
            type: object
            properties:
                username:
                    type: string
                    example: johndoe
                apellido:
                    type: string
                    example: doe
                nombre:
                    type: string
                    example: john
                email:
                    type: string
                    format: email
                    example: johndoe@example.com
                password:
                    type: string
                    format: password
                    example: strongpassword123
            required:
                - username
                - email
                - password

        RecoverPasswordRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@example.com
                newPassword:
                    type: string
                    format: password
                    example: newstrongpassword123
            required:
                - email
                - newPassword

paths:
    /auth/login:
        post:
            summary: User login
            description: Authenticates a user and returns a JWT token.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"
            responses:
                "200":
                    description: Successful login
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        description: JWT token
                                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                "401":
                    description: Invalid credentials
                "400":
                    description: Bad request (e.g., missing email or password)

    /auth/:
        post:
            summary: User registration
            description: Registers a new user in the system.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RegisterRequest"
            responses:
                "201":
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponse"
                "400":
                    description: Bad request (e.g., missing or invalid fields)
                "409":
                    description: Email or username already exists

    /auth/password:
        put:
            summary: Recover and reset password
            description: Validates the user's email and updates the password.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RecoverPasswordRequest"
            responses:
                "200":
                    description: Password has been updated
                "404":
                    description: User not found
                "400":
                    description: Bad request (e.g., missing or invalid email or password)

    /users:
        get:
            summary: Get all users
            description: Returns a list of all registered users.
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: A list of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserResponse"
                "401":
                    description: Unauthorized
                "500":
                    description: Internal server error

    /users/{id}:
        get:
            summary: Get the authenticated user's details
            description: Returns the details of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            responses:
                "200":
                    description: User found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponse"
                "404":
                    description: User not found
                "400":
                    description: Bad request (e.g., invalid ID format)
                "401":
                    description: Unauthorized

        put:
            summary: Update the authenticated user's details
            description: Updates the details of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
            responses:
                "200":
                    description: User updated successfully
                "404":
                    description: User not found
                "400":
                    description: Bad request (e.g., invalid fields or ID)
                "401":
                    description: Unauthorized

        patch:
            summary: Partially update the authenticated user's details
            description: Updates one or more attributes of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdate"
            responses:
                "200":
                    description: User updated successfully
                "404":
                    description: User not found
                "400":
                    description: Bad request (e.g., invalid fields or ID)
                "401":
                    description: Unauthorized

        delete:
            summary: Delete the authenticated user's account
            description: Deletes the authenticated user from the system.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            responses:
                "204":
                    description: User deleted successfully
                "404":
                    description: User not found
                "400":
                    description: Bad request (e.g., invalid ID format)
                "401":
                    description: Unauthorized