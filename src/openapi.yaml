openapi: 3.0.0
info:
    title: User Taller API
    version: 1.0.0
    description: API for managing users, including registration, login, password recovery, and CRUD operations.

servers:
    - url: http://localhost:3000/api

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    example: 60a7842f58d6c90d58f4e2b6
                nombre:
                    type: string
                    example: John
                apellido:
                    type: string
                    example: Doe
                username:
                    type: string
                    example: johndoe123
                email:
                    type: string
                    example: john@example.com
                password:
                    type: string
                    example: "hashed_password"

        UserResponse:
            type: object
            properties:
                id:
                    type: string
                    example: 60a7842f58d6c90d58f4e2b6
                nombre:
                    type: string
                    example: John
                apellido:
                    type: string
                    example: Doe
                username:
                    type: string
                    example: johndoe123
                email:
                    type: string
                    example: john@example.com

        UserUpdate:
            type: object
            properties:
                nombre:
                    type: string
                    example: John
                apellido:
                    type: string
                    example: Doe
                username:
                    type: string
                    example: johndoe123
                email:
                    type: string
                    example: john@example.com

        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                    example: john@example.com
                password:
                    type: string
                    example: "secure_password"

        RegisterRequest:
            type: object
            properties:
                nombre:
                    type: string
                    example: John
                apellido:
                    type: string
                    example: Doe
                username:
                    type: string
                    example: johndoe123
                email:
                    type: string
                    example: john@example.com
                password:
                    type: string
                    example: "secure_password"

        RecoverPasswordRequest:
            type: object
            properties:
                email:
                    type: string
                    example: john@example.com
                newPassword:
                    type: string
                    example: "new_secure_password"

paths:
    /auth/login:
        post:
            summary: User login
            description: Authenticates a user and returns a JWT token.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"
            responses:
                200:
                    description: Login successful, JWT token returned.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        example: "jwt_token"
                400:
                    description: Invalid credentials or missing fields.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid credentials"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

    /auth/:
        post:
            summary: User registration
            description: Registers a new user in the system.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RegisterRequest"
            responses:
                201:
                    description: User registered successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    userId:
                                        type: string
                                        example: "60a7842f58d6c90d58f4e2b6"
                                    message:
                                        type: string
                                        example: "User registered successfully"
                400:
                    description: Missing fields or invalid data.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Email and password are required"
                409:
                    description: Conflict, email or username already exists.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Email or username already exists"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

    /auth/password:
        put:
            summary: Recover and reset password
            description: Validates the user's email and updates the password.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RecoverPasswordRequest"
            responses:
                200:
                    description: Password updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Password updated successfully"
                400:
                    description: Missing fields or invalid email.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Email and new password are required"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

    /users:
        get:
            summary: Get all users
            description: Returns a list of all registered users.
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of users returned.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserResponse"
                404:
                    description: No users found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "No users found"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

    /users/{id}:
        get:
            summary: Get the authenticated user's details
            description: Returns the details of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            responses:
                200:
                    description: User details returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponse"
                400:
                    description: Invalid ID format.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid ID format"
                403:
                    description: Unauthorized to access this resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Unauthorized"
                404:
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

        put:
            summary: Update the authenticated user's details
            description: Updates the details of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdate"
            responses:
                200:
                    description: User updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponse"
                400:
                    description: Invalid ID format or missing fields.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid ID format or missing fields"
                403:
                    description: Unauthorized to update this resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Unauthorized"
                404:
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

        patch:
            summary: Partially update the authenticated user's details
            description: Updates one or more attributes of the authenticated user.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdate"
            responses:
                200:
                    description: User updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserResponse"
                400:
                    description: Invalid ID format or missing fields.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid ID format or missing fields"
                403:
                    description: Unauthorized to update this resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Unauthorized"
                404:
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"

        delete:
            summary: Delete the authenticated user's account
            description: Deletes the authenticated user from the system.
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      example: 60a7842f58d6c90d58f4e2b6
            responses:
                204:
                    description: User deleted successfully, no content returned.
                400:
                    description: Invalid ID format.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Invalid ID format"
                403:
                    description: Unauthorized to delete this resource.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Unauthorized"
                404:
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "User not found"
                500:
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Server error"
