version: '3'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile_API
    ports:
      - "3000:3000"
    networks:
      - localprom
    environment:
      - PORT=3000
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      - mongo
      - rabbitmq
    restart: always

  mongo:
    image: mongo:5.0
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - localprom
    volumes:
      - mongo-data:/data/db

  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb-exporter
    networks:
      - localprom
    environment:
      - MONGODB_URI=${MONGO_URI}
    ports:
      - "9216:9216"  # Puerto para las métricas
    depends_on:
      - mongo

  jenkins:
    image: jenkins-custom
    build:
      context: .
      dockerfile: Dockerfile_Jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    networks:
      - localprom
    volumes:
      - jenkins_home:/var/jenkins_home
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    networks:
      - localprom
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki

  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    networks:
      - localprom
    volumes:
      - type: bind
        source: ./src/config/local-config.yaml
        target: /etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.8.0
    networks:
      - localprom
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - type: bind
        source: ./src/config/config.yml
        target: /etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Microservicio 2
  app-go:
    build:
      context: ../gestion-perfil  # Asume que el Dockerfile del micro 2 está en la carpeta ./micro2
      dockerfile: Dockerfile_profile
    container_name: app-go
    depends_on:
      - rabbitmq
    environment:
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_URI=amqp://admin:admin@rabbitmq:5672/
    ports:
      - "8081:8081"
    networks:
      - localprom

  # Servicio de RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  
      - "15672:15672"  
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - localprom
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5


  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./src/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - type: bind
        source: ./src/config/alert_rules.yml
        target: /etc/prometheus/alert_rules.yml    
    networks:
      - localprom
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - app

  node-exporter:
    image: prom/node-exporter
    networks:
      - localprom
    ports:
      - 9100:9100

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - type: bind
        source: ./src/config/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml 
    networks:
      - localprom
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    depends_on:
      - prometheus

  python_service:
    build: 
      context: ../taller_health/
      dockerfile: ../taller_health/Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - alertmanager
    networks:
      - localprom

networks:
  localprom:
    driver: bridge

volumes:
  mongo-data:
  jenkins_home:
  grafana_data:
  loki_data: